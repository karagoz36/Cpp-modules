#pragma once  // Dosyanın birden fazla kez dahil edilmesini önler.

#include <iostream>  // Giriş-çıkış işlemleri için gerekli kütüphane.
#include <vector>    // std::vector konteyneri için kütüphane.
#include <deque>     // std::deque konteyneri için kütüphane.
#include <stack>     // std::stack konteyneri için kütüphane.
#include <ctime>     // Zaman ölçümleri için gerekli kütüphane.
#include <exception> // Özel durum (exception) işleme için gerekli kütüphane.
#include <cstdlib>   // Genel amaçlı C standart kütüphane.

class FordJohnsonAlgorithm
{
public:
    FordJohnsonAlgorithm();  // Varsayılan kurucu fonksiyon.

    // Kopyalama kurucusu.
    FordJohnsonAlgorithm(FordJohnsonAlgorithm const &other);

    // Atama (assignment) operatörü.
    FordJohnsonAlgorithm &operator=(FordJohnsonAlgorithm const &other);

    ~FordJohnsonAlgorithm();  // Yıkıcı fonksiyon.

    // Vektör tabanlı sıralama işlemlerini gerçekleştiren iç sınıf.
    class PmergeVector
    {
    private:
        std::vector<int> vec;               // Sıralanacak sayıları depolayan vektör.
        std::vector<int> positions;         // Eklemeler için pozisyonları tutan vektör.
        std::vector<std::pair<int, int>> vecPair; // Çiftleri depolayan vektör.
        std::vector<int> mainChain;         // Ana zincir (sıralı elemanlar).
        std::vector<int> pend;              // Bekleyen (eklenmeyi bekleyen) elemanlar.
        std::vector<int> jacobSequence;     // Jacobsthal sıralama indekslerini depolar.

        void getIntegerSequence(char *av[]);          // Sayı dizisini komut satırı argümanlarından alır.
        void createVectorPairs();                     // Elemanları çiftler halinde oluşturur.
        void sortVectorPairs();                       // Çiftleri sıralar.
        void merge(std::vector<std::pair<int, int>> &array, int begin, int mid, int end); // İki yarıyı birleştirir.
        void mergeSort(std::vector<std::pair<int, int>> &array, int begin, int end);      // Vektörü merge sort ile sıralar.
        void createMainChainAndPend();                // Ana zincir ve bekleyen elemanlar listesi oluşturur.
        int binarySearch(std::vector<int> array, int target, int begin, int end); // İkili arama (binary search) yapar.
        void generateJacobInsertionSequence();        // Jacobsthal ekleme sırasını oluşturur.
        int jacobsthal(int n);                        // Jacobsthal sayı dizisini hesaplar.
        void generatPositions();                      // Eklemeler için pozisyonları oluşturur.
        void insertToMainChain();                     // Bekleyen elemanları ana zincire ekler.

    public:
        PmergeVector();  // Varsayılan kurucu fonksiyon.
        ~PmergeVector(); // Yıkıcı fonksiyon.
        void applyMergeInsertSort(char *av[]); // Birleştirme-Ekleme Sıralama işlemini uygular.
        void printBefore();                    // Sıralama öncesi vektörü yazdırır.
        void printAfter();                     // Sıralama sonrası vektörü yazdırır.
    };

    // Deque tabanlı sıralama işlemlerini gerçekleştiren iç sınıf.
    class PmergeDeque
    {
    private:
        std::deque<int> deque;               // Sıralanacak sayıları depolayan deque.
        std::deque<int> positions;           // Eklemeler için pozisyonları tutan deque.
        std::deque<std::pair<int, int>> dequePair; // Çiftleri depolayan deque.
        std::deque<int> mainChain;           // Ana zincir (sıralı elemanlar).
        std::deque<int> pend;                // Bekleyen (eklenmeyi bekleyen) elemanlar.
        std::deque<int> jacobSequence;       // Jacobsthal sıralama indekslerini depolar.

        void getIntegerSequence(char *av[]);          // Sayı dizisini komut satırı argümanlarından alır.
        void createDequePairs();                      // Elemanları çiftler halinde oluşturur.
        void sortDequePairs();                        // Çiftleri sıralar.
        void merge(std::deque<std::pair<int, int>> &array, int begin, int mid, int end); // İki yarıyı birleştirir.
        void mergeSort(std::deque<std::pair<int, int>> &array, int begin, int end);      // Deque'yi merge sort ile sıralar.
        void createMainChainAndPend();                // Ana zincir ve bekleyen elemanlar listesi oluşturur.
        int binarySearch(std::deque<int> array, int target, int begin, int end); // İkili arama (binary search) yapar.
        void generateJacobInsertionSequence();        // Jacobsthal ekleme sırasını oluşturur.
        int jacobsthal(int n);                        // Jacobsthal sayı dizisini hesaplar.
        void generatPositions();                      // Eklemeler için pozisyonları oluşturur.
        void insertToMainChain();                     // Bekleyen elemanları ana zincire ekler.

    public:
        PmergeDeque();  // Varsayılan kurucu fonksiyon.
        ~PmergeDeque(); // Yıkıcı fonksiyon.
        void applyMergeInsertSort(char *av[]); // Birleştirme-Ekleme Sıralama işlemini uygular.
    };

    // Özel durum (exception) sınıfı, hataları işlemek için kullanılır.
    class exception : public std::exception
    {
    public:
        exception();                       // Varsayılan kurucu fonksiyon.
        virtual ~exception() throw();      // Yıkıcı fonksiyon, özel durum fırlatma garantisi verir.
        virtual const char *what() const throw(); // Hata mesajını döner.
    };
};
